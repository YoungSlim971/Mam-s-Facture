#!/usr/bin/env bash
set -euo pipefail

# Se place dans la racine du projet quel que soit l'endroit d'où le script est lancé
cd "$(dirname "$0")/.." || exit 1
if [[ ! -d backend ]]; then
  # Le script était déjà a la racine
  cd "$(dirname "$0")" || exit 1
fi

if [[ "$(uname)" != "Darwin" ]]; then
  echo "Ce script est destiné à macOS." >&2
  exit 1
fi

error_exit() {
  echo "❌ $1" >&2
  exit 1
}

echo "🧹 [0/5] Libération des ports si nécessaires..."
PORTS_TO_FREE=(3001 5173)

for PORT in "${PORTS_TO_FREE[@]}"; do
  PIDS=$(lsof -ti tcp:"$PORT" 2>/dev/null || true)
  if [[ -z "$PIDS" ]]; then
    echo "✅ Port $PORT libre"
    continue
  fi

  KILLED=false
  for PID in $PIDS; do
    CMD=$(ps -p "$PID" -o comm= 2>/dev/null | tr -d ' ')
    if [[ "$CMD" == node* || "$CMD" == vite* ]]; then
      kill -9 "$PID" && KILLED=true
    fi
  done

  if $KILLED; then
    echo "🔴 Port $PORT occupé → terminé"
  else
    echo "⚠️ Port $PORT occupé par un processus non Node.js/Vite"
  fi
done

echo "🟢 Tous les ports critiques sont prêts."

echo "🔧 [1/5] Installation des dépendances..."
pnpm install --frozen-lockfile || error_exit "Impossible d'installer les dépendances racine."
(cd backend && pnpm install --frozen-lockfile) || error_exit "Impossible d'installer les dépendances backend."
(cd frontend && pnpm install --frozen-lockfile && pnpm build) || error_exit "Échec de la compilation du frontend."

echo "✅ [2/5] Frontend compilé avec succès"

# Vérification des permissions d'écriture dans backend
cd "$(dirname "$0")/backend"
echo test > .perm-test || PERM_ERROR=1
rm -f .perm-test
if [[ ${PERM_ERROR:-} ]]; then
  echo "❌ Permissions insuffisantes dans /backend. Essayez : sudo chown -R $USER ./backend" >&2
  exit 1
fi
cd "$(dirname "$0")"

echo "🚀 [3/5] Lancement des serveurs..."
pnpm dev:all &
SERVERS_PID=$!

# Attente que le port 5173 soit disponible
for i in {1..15}; do
  if nc -z localhost 5173 2>/dev/null; then
    READY=1
    break
  fi
  sleep 1
done

if [[ -z ${READY:-} ]]; then
  kill "$SERVERS_PID"
  error_exit "Le port 5173 n'est pas disponible."
fi

echo "🌐 [4/5] Ouverture de Safari..."
open -a Safari http://localhost:5173 || { kill "$SERVERS_PID"; error_exit "Impossible d'ouvrir Safari."; }

echo "🎉 [5/5] L'application est lancée !"

trap "kill \"$SERVERS_PID\"" SIGINT
wait "$SERVERS_PID" || echo "⚠️  Backend crashed — vérifiez les permissions ou le port 3001" >&2
